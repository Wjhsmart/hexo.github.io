{"meta":{"title":"危锦辉","subtitle":"危锦辉的博客","description":"此博客用来记录工作中所遇到的问题和解决方案，方便以后记忆","author":"危锦辉","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"Java 时间工具类","slug":"Java 时间工具类","date":"2019-01-08T09:37:24.000Z","updated":"2019-01-09T07:42:10.919Z","comments":true,"path":"2019/01/08/Java 时间工具类/","link":"","permalink":"http://yoursite.com/2019/01/08/Java 时间工具类/","excerpt":"","text":"1、说明 收藏自己使用到的各种时间操作的工具类，方便以后自己使用，只做记录。 2、codepackage top.zywork.common.utils;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;public class DateUtils &#123; public static final String DATE_TIME_PATTERN = &quot;yyyy-MM-dd HH:mm:ss&quot;; public static final String MINUTE_PATTERN = &quot;yyyy-MM-dd HH:mm&quot;; public static final String HOUR_PATTERN = &quot;yyyy-MM-dd HH:mm:ss&quot;; public static final String DATE_PATTERN = &quot;yyyy-MM-dd&quot;; public static final String MONTH_PATTERN = &quot;yyyy-MM&quot;; public static final String YEAR_PATTERN = &quot;yyyy&quot;; public static final String MINUTE_ONLY_PATTERN = &quot;mm&quot;; public static final String HOUR_ONLY_PATTERN = &quot;HH&quot;; /** * 日期相加减天数 * @param date 如果为Null，则为当前时间 * @param days 加减天数 * @param includeTime 是否包括时分秒,true表示包含 * @return * @throws ParseException */ public static Date dateAdd(Date date, int days, boolean includeTime) throws ParseException&#123; if(date == null)&#123; date = new Date(); &#125; if(!includeTime)&#123; SimpleDateFormat sdf = new SimpleDateFormat(DateUtils.DATE_PATTERN); date = sdf.parse(sdf.format(date)); &#125; Calendar cal = Calendar.getInstance(); cal.setTime(date); cal.add(Calendar.DATE, days); return cal.getTime(); &#125; /** * 时间格式化成字符串 * @param date Date 需要格式化的时间 * @param pattern 指定格式化后的格式，如果为空，则为yyyy-MM-dd * @return * @throws ParseException */ public static String dateFormat(Date date, String pattern) throws ParseException&#123; if(StrUtils.isBlank(pattern))&#123; pattern = DateUtils.DATE_PATTERN; &#125; SimpleDateFormat sdf = new SimpleDateFormat(pattern); return sdf.format(date); &#125; /** * 字符串解析成时间对象 * @param dateTimeString String类型的时间字符串 * @param pattern 字符串的时间格式，如果为空，则为yyyy-MM-dd * @return * @throws ParseException */ public static Date dateParse(String dateTimeString, String pattern) throws ParseException&#123; if(StrUtils.isBlank(pattern))&#123; pattern = DateUtils.DATE_PATTERN; &#125; SimpleDateFormat sdf = new SimpleDateFormat(pattern); return sdf.parse(dateTimeString); &#125; /** * 将日期时间格式成只有日期的字符串（可以直接使用dateFormat，Pattern为Null进行格式化） * @param dateTime Date 需要格式话的时间日期 * @return * @throws ParseException */ public static String dateTimeToDateString(Date dateTime) throws ParseException&#123; String dateTimeString = dateFormat(dateTime, DATE_TIME_PATTERN); return dateTimeString.substring(0, 10); &#125; /** * 当时、分、秒为00:00:00时，将日期时间格式成只有日期的字符串， * 当时、分、秒不为00:00:00时，直接返回 * @param dateTime Date * @return * @throws ParseException */ public static String dateTimeToDateStringIfTimeEndZero(Date dateTime) throws ParseException&#123; String dateTimeString = DateUtils.dateFormat(dateTime, DateUtils.DATE_TIME_PATTERN); if(dateTimeString.endsWith(&quot;00:00:00&quot;))&#123; return dateTimeString.substring(0, 10); &#125;else&#123; return dateTimeString; &#125; &#125; /** * 将日期时间格式成日期对象，和dateParse互用 * @param dateTime Date * @return Date * @throws ParseException */ public static Date dateTimeToDate(Date dateTime) throws ParseException&#123; Calendar cal = Calendar.getInstance(); cal.setTime(dateTime); cal.set(Calendar.HOUR_OF_DAY, 0); cal.set(Calendar.MINUTE, 0); cal.set(Calendar.SECOND, 0); cal.set(Calendar.MILLISECOND, 0); return cal.getTime(); &#125; /** * 时间加减小时 * @param startDate 要处理的时间，Null则为当前时间 * @param hours 加减的小时 * @return Date */ public static Date dateAddHours(Date startDate, int hours) &#123; if (startDate == null) &#123; startDate = new Date(); &#125; Calendar c = Calendar.getInstance(); c.setTime(startDate); c.set(Calendar.HOUR, c.get(Calendar.HOUR) + hours); return c.getTime(); &#125; /** * 时间加减分钟 * @param startDate 要处理的时间，Null则为当前时间 * @param minutes 加减的分钟 * @return */ public static Date dateAddMinutes(Date startDate, int minutes) &#123; if (startDate == null) &#123; startDate = new Date(); &#125; Calendar c = Calendar.getInstance(); c.setTime(startDate); c.set(Calendar.MINUTE, c.get(Calendar.MINUTE) + minutes); return c.getTime(); &#125; /** * 时间加减秒数 * @param startDate 要处理的时间，Null则为当前时间 * @param minutes 加减的秒数 * @return */ public static Date dateAddSeconds(Date startDate, int seconds) &#123; if (startDate == null) &#123; startDate = new Date(); &#125; Calendar c = Calendar.getInstance(); c.setTime(startDate); c.set(Calendar.SECOND, c.get(Calendar.SECOND) + seconds); return c.getTime(); &#125; /** * 时间加减天数 * @param startDate 要处理的时间，Null则为当前时间 * @param days 加减的天数 * @return Date */ public static Date dateAddDays(Date startDate, int days) &#123; if (startDate == null) &#123; startDate = new Date(); &#125; Calendar c = Calendar.getInstance(); c.setTime(startDate); c.set(Calendar.DATE, c.get(Calendar.DATE) + days); return c.getTime(); &#125; /** * 时间加减月数 * @param startDate 要处理的时间，Null则为当前时间 * @param months 加减的月数 * @return Date */ public static Date dateAddMonths(Date startDate, int months) &#123; if (startDate == null) &#123; startDate = new Date(); &#125; Calendar c = Calendar.getInstance(); c.setTime(startDate); c.set(Calendar.MONTH, c.get(Calendar.MONTH) + months); return c.getTime(); &#125; /** * 时间加减年数 * @param startDate 要处理的时间，Null则为当前时间 * @param years 加减的年数 * @return Date */ public static Date dateAddYears(Date startDate, int years) &#123; if (startDate == null) &#123; startDate = new Date(); &#125; Calendar c = Calendar.getInstance(); c.setTime(startDate); c.set(Calendar.YEAR, c.get(Calendar.YEAR) + years); return c.getTime(); &#125; /** * 时间比较（如果myDate&gt;compareDate返回1，&lt;返回-1，相等返回0） * @param myDate 时间 * @param compareDate 要比较的时间 * @return int */ public static int dateCompare(Date myDate, Date compareDate) &#123; Calendar myCal = Calendar.getInstance(); Calendar compareCal = Calendar.getInstance(); myCal.setTime(myDate); compareCal.setTime(compareDate); return myCal.compareTo(compareCal); &#125; /** * 获取两个时间中最小的一个时间 * @param date * @param compareDate * @return */ public static Date dateMin(Date date, Date compareDate) &#123; if(date == null)&#123; return compareDate; &#125; if(compareDate == null)&#123; return date; &#125; if(1 == dateCompare(date, compareDate))&#123; return compareDate; &#125;else if(-1 == dateCompare(date, compareDate))&#123; return date; &#125; return date; &#125; /** * 获取两个时间中最大的一个时间 * @param date * @param compareDate * @return */ public static Date dateMax(Date date, Date compareDate) &#123; if(date == null)&#123; return compareDate; &#125; if(compareDate == null)&#123; return date; &#125; if(1 == dateCompare(date, compareDate))&#123; return date; &#125;else if(-1 == dateCompare(date, compareDate))&#123; return compareDate; &#125; return date; &#125; /** * 获取两个日期（不含时分秒）相差的天数，不包含今天 * @param startDate * @param endDate * @return * @throws ParseException */ public static int dateBetween(Date startDate, Date endDate) throws ParseException &#123; Date dateStart = dateParse(dateFormat(startDate, DATE_PATTERN), DATE_PATTERN); Date dateEnd = dateParse(dateFormat(endDate, DATE_PATTERN), DATE_PATTERN); return (int) ((dateEnd.getTime() - dateStart.getTime())/1000/60/60/24); &#125; /** * 获取两个日期（不含时分秒）相差的天数，包含今天 * @param startDate * @param endDate * @return * @throws ParseException */ public static int dateBetweenIncludeToday(Date startDate, Date endDate) throws ParseException &#123; return dateBetween(startDate, endDate) + 1; &#125; /** * 获取两个日期相差的小时 * @param startDate * @param endDate * @return * @throws ParseException */ public static int dateBetweenHour(Date startDate, Date endDate) throws ParseException &#123; return (int) ((end.getTime() - start.getTime()) / (60 * 60 * 1000)); &#125; /** * 获取两个日期相差的分钟 * @param startDate * @param endDate * @return * @throws ParseException */ public static int dateBetweenHour(Date startDate, Date endDate) throws ParseException &#123; return (int) ((end.getTime() - start.getTime()) / (60 * 1000)); &#125; /** * 获取日期时间的年份，如2017-02-13，返回2017 * @param date * @return */ public static int getYear(Date date) &#123; Calendar cal = Calendar.getInstance(); cal.setTime(date); return cal.get(Calendar.YEAR); &#125; /** * 获取日期时间的月份，如2017年2月13日，返回2 * @param date * @return */ public static int getMonth(Date date) &#123; Calendar cal = Calendar.getInstance(); cal.setTime(date); return cal.get(Calendar.MONTH) + 1; &#125; /** * 获取日期时间的月份，如2017年2月13日，返回2 * @param date * @return */ public static int getMonth(Date date) &#123; Calendar cal = Calendar.getInstance(); cal.setTime(date); return cal.get(Calendar.MONTH) + 1; &#125; /** * 获取日期时间的星期（即返回星期几），如2017-02-13，返回星期三 * @param date * @return */ public static int getDate(Date date) &#123; String[] weekDays = &#123; &quot;星期日&quot;, &quot;星期一&quot;, &quot;星期二&quot;, &quot;星期三&quot;, &quot;星期四&quot;, &quot;星期五&quot;, &quot;星期六&quot; &#125;; Calendar calendar = Calendar.getInstance(); calendar.setTime(date); int dayIndex = calendar.get(calendar.DAY_OF_WEEK) - calendar.SUNDAY; if (dayIndex &lt; 0) &#123; dayIndex = 0; &#125; return weekDays[dayIndex]; &#125; /** * 获取日期时间当月的总天数，如2017-02-13，返回28 * @param date * @return */ public static int getDaysOfMonth(Date date) &#123; Calendar cal = Calendar.getInstance(); cal.setTime(date); return cal.getActualMaximum(Calendar.DATE); &#125; /** * 获取日期时间当年的总天数，如2017-02-13，返回2017年的总天数 * @param date * @return */ public static int getDaysOfYear(Date date) &#123; Calendar cal = Calendar.getInstance(); cal.setTime(date); return cal.getActualMaximum(Calendar.DAY_OF_YEAR); &#125; /** * 根据时间获取当月最大的日期 * &lt;li&gt;2017-02-13，返回2017-02-28&lt;/li&gt; * &lt;li&gt;2016-02-13，返回2016-02-29&lt;/li&gt; * &lt;li&gt;2016-01-11，返回2016-01-31&lt;/li&gt; * @param date Date * @return * @throws Exception */ public static Date maxDateOfMonth(Date date) throws Exception &#123; Calendar cal = Calendar.getInstance(); cal.setTime(date); int value = cal.getActualMaximum(Calendar.DATE); return dateParse(dateFormat(date, MONTH_PATTERN) + &quot;-&quot; + value, null); &#125; /** * 根据时间获取当月最小的日期，也就是返回当月的1号日期对象 * @param date Date * @return * @throws Exception */ public static Date minDateOfMonth(Date date) throws Exception &#123; Calendar cal = Calendar.getInstance(); cal.setTime(date); int value = cal.getActualMinimum(Calendar.DATE); return dateParse(dateFormat(date, MONTH_PATTERN) + &quot;-&quot; + value, null); &#125;&#125;","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}],"keywords":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}]},{"title":"Vue axios模拟表单POST请求 Qs使用教程","slug":"Vue axios模拟表单POST请求 Qs使用教程","date":"2019-01-08T09:35:24.000Z","updated":"2019-01-09T07:42:10.919Z","comments":true,"path":"2019/01/08/Vue axios模拟表单POST请求 Qs使用教程/","link":"","permalink":"http://yoursite.com/2019/01/08/Vue axios模拟表单POST请求 Qs使用教程/","excerpt":"","text":"1、安装Qs依赖1npm install qs 2、js中引用Qs1import Qs from &apos;qs&apos; 3、构造数据1234var formData = Qs.stringify(&#123; username:&apos;test&apos;, password:&apos;123456&apos;&#125;); 4、使用数据123456789axios.request(&#123; url: &apos;/auth/login&apos;, method: &apos;POST&apos;, data: formData, headers: &#123; &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded; charset=UTF-8&apos;, &apos;Authorization&apos;: &apos;Bearer &apos; + token &#125;&#125;)","categories":[{"name":"Vue","slug":"Vue","permalink":"http://yoursite.com/categories/Vue/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://yoursite.com/tags/Vue/"}],"keywords":[{"name":"Vue","slug":"Vue","permalink":"http://yoursite.com/categories/Vue/"}]},{"title":"Linux 安装Node.js","slug":"Linux 安装Node.js","date":"2019-01-08T09:30:24.000Z","updated":"2019-01-09T07:42:10.919Z","comments":true,"path":"2019/01/08/Linux 安装Node.js/","link":"","permalink":"http://yoursite.com/2019/01/08/Linux 安装Node.js/","excerpt":"","text":"一、下载node.js1.1、执行下面命令，创建目录并进入到自定义目录12# 创建并进入到node目录mkdir /usr/local/node &amp;&amp; cd /usr/local/node 1.2、执行下面的命令下载node.js,也可以执行官网下载好之后上传到服务器英文官网：https://nodejs.org/en/download/中文官网：http://nodejs.cn/download/12# 注意这里是大写的Ocurl -O https://nodejs.org/dist/v10.15.0/node-v10.15.0-linux-x64.tar.xz 二、开始安装2.1、输入下面命令解压文件12# 解压文件tar -vxf node-v10.15.0-linux-x64.tar.xz 2.2、进入到解压的目录，查看bin目录下是否有node,npm文件 2.3、建立软链接，变为全局12ln -s /usr/local/node/node-v10.15.0-linux-x64/bin/npm /usr/local/binln -s /usr/local/node/node-v10.15.0-linux-x64/bin/node /usr/local/bin 2.4、返回到用户的根目录检查是否有测试成功，输入一下命令12npm -vnode -v 2.5、如果如图所示，有版本号，则说明安装成功","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}]},{"title":"MacOS zsh:command not found:mysql 解决方案","slug":"Mac OS zsh: command not found: mysql解决方案","date":"2019-01-08T09:30:24.000Z","updated":"2019-01-09T07:42:10.919Z","comments":true,"path":"2019/01/08/Mac OS zsh: command not found: mysql解决方案/","link":"","permalink":"http://yoursite.com/2019/01/08/Mac OS zsh: command not found: mysql解决方案/","excerpt":"","text":"环境： Mac OS版本：10.14.2 MySQL版本：5.7.24 1、打开终端，命令行输入：mysql，总是返回：1zsh:command not found: mysql 网上的各种方法都试过了，比如ln -s 系列的改路径，command+R的改权限，统统都不行。后来找到方法，轻松解决问题，在这里记录一下：1alias mysql=/usr/local/mysql/bin/mysql 注意：这种方式只能临时有效，下次登入还是会出现：zsh:command not found: mysql alias：用于设置指令的别名，自定义指令的别名，若仅输入alias，则可列出目前所有的别名设置。alias的效力仅基于该次登入操作。若要每次登入即自动设置好别名，可在.profile或.cshrc种设定指令的别名。 语法：alias [别名]=[指令名称]设置别名永久有效： 方法一： 执行1cd ~ 进入到用户的目录，执行：1vim ~/.bashrc 把下面的内容加入到文件当中1alias mysql=/usr/local/mysql/bin/mysql 按ESC，输入：1:wq 执行下面的命令，使配置文件生效：1source ~/.bashrc 重启终端，输入：1mysql 检查是否生效，如果没有生效，则执行下面的命令：1vim ~/.bash_profile 在~/.bash_profile文件后面加入下面的指令1source ~/.bashrc 按ESC输入：1:wq 使~./bash_profile文件生效，输入：1source ~/.bash_profile 方法二：如果你的终端安装了Zsh，发现使用方法一后并不一定生效（本自己电脑傻姑娘就是这样），经过排查发现Zsh有自己的启动默认执行的文件~./zshrc，要在Zsh种是alias永久生效，则需要编辑~./zshrc文件，在文件中添加一行：1alias mysql=/usr/local/mysql/bin/mysql 按ESC输入：1:wq 使~./zshrc文件生效，输入：1source ~/.zshrc","categories":[{"name":"MacOS","slug":"MacOS","permalink":"http://yoursite.com/categories/MacOS/"}],"tags":[{"name":"MacOS","slug":"MacOS","permalink":"http://yoursite.com/tags/MacOS/"}],"keywords":[{"name":"MacOS","slug":"MacOS","permalink":"http://yoursite.com/categories/MacOS/"}]},{"title":"关于我","slug":"关于我","date":"2019-01-08T08:35:24.000Z","updated":"2019-01-09T07:42:10.920Z","comments":true,"path":"2019/01/08/关于我/","link":"","permalink":"http://yoursite.com/2019/01/08/关于我/","excerpt":"","text":"个人信息姓名： 危锦辉网名：Wjhsmart英文名： Carter社交信息QQ： 672630243微信： GZWjhsmartGitHub：https://github.com/wjhsmrtCSDN地址：https://blog.csdn.net/Wjhsmart个人主页：http://www.wjhsmart.vip个人说明人生格言：当你的能力不足以撑起你的野心时，你就应该静下心来好好学习！！！个人说明：一名后端Java开发工程师，喜欢专研各种新奇的技术，喜欢埋在技术的海洋中，结交志同道合的朋友一起搞事情","categories":[{"name":"关于我","slug":"关于我","permalink":"http://yoursite.com/categories/关于我/"}],"tags":[],"keywords":[{"name":"关于我","slug":"关于我","permalink":"http://yoursite.com/categories/关于我/"}]}]}